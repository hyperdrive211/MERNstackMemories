[{"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\App.js":"1","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\index.js":"2","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Posts.js":"3","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Form\\Form.js":"4","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Post\\Post.js":"5","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\styles.js":"6","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Post\\styles.js":"7","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\reducers\\index.js":"8","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\reducers\\posts.js":"9","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\actions\\posts.js":"10","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\api\\index.js":"11","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Form\\styles.js":"12"},{"size":1506,"mtime":1606926417289,"results":"13","hashOfConfig":"14"},{"size":475,"mtime":1606925075445,"results":"15","hashOfConfig":"14"},{"size":841,"mtime":1606947082882,"results":"16","hashOfConfig":"14"},{"size":3176,"mtime":1606945725173,"results":"17","hashOfConfig":"14"},{"size":2249,"mtime":1606946517309,"results":"18","hashOfConfig":"14"},{"size":297,"mtime":1606775223070,"results":"19","hashOfConfig":"14"},{"size":1351,"mtime":1606946561772,"results":"20","hashOfConfig":"14"},{"size":125,"mtime":1606777751301,"results":"21","hashOfConfig":"14"},{"size":402,"mtime":1606945046612,"results":"22","hashOfConfig":"14"},{"size":872,"mtime":1606933847399,"results":"23","hashOfConfig":"14"},{"size":286,"mtime":1606932905438,"results":"24","hashOfConfig":"14"},{"size":521,"mtime":1606819565747,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6226ak",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\App.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\index.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Posts.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Form\\Form.js",["54"],"import React, {useState, useEffect} from 'react'; \r\nimport useStyles from './styles'; \r\nimport {TextField, Button, Typography, Paper} from '@material-ui/core'; \r\nimport FileBase from 'react-file-base64'; \r\nimport {useSelector, useDispatch} from 'react-redux'; \r\nimport {createPost, updatePost} from '../../actions/posts'; \r\n\r\nconst Form = ({currentId, setCurrentId}) => {\r\n    const [postData, setPostData] = useState({\r\n        creator: '', \r\n        title: '',\r\n        message: '', \r\n        tags: '', \r\n        selectedFile: ''\r\n    }); \r\n    const post = useSelector((state) => currentId ? state.posts.find((p) =>p._id ==currentId) : null); \r\n    const classes = useStyles(); \r\n    const dispatch = useDispatch(); \r\n\r\n\r\n    useEffect(() => {\r\n        if(post) setPostData(post)\r\n    }, [post])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        if(currentId){\r\n            dispatch(updatePost(currentId, postData))\r\n        } else {\r\n        dispatch(createPost(postData));\r\n        }\r\n        clear(); \r\n    }\r\n\r\n    const clear =() => {\r\n       setCurrentId(null);\r\n       setPostData({creator: '', title:'', message:'', tags: '', selectedFile: ''}); \r\n    }\r\n\r\n    return(\r\n        <Paper className={classes.paper}>\r\n           <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n               <Typography variant=\"h6\">{currentId ? 'Editing' : 'Creating'} a Memory</Typography>\r\n               <TextField name=\"creator\"\r\n                variant=\"outlined\" \r\n                label=\"Creator\" \r\n                fullWidth \r\n                value={postData.creator} \r\n                onChange={(e)=> setPostData({...postData, creator: e.target.value})}/>\r\n                 <TextField name=\"title\"\r\n                variant=\"outlined\" \r\n                label=\"Title\" \r\n                fullWidth \r\n                value={postData.title} \r\n                onChange={(e)=> setPostData({...postData, title: e.target.value})}/>\r\n                 <TextField name=\"message\"\r\n                variant=\"outlined\" \r\n                label=\"Message\" \r\n                fullWidth \r\n                value={postData.message} \r\n                onChange={(e)=> setPostData({...postData, message: e.target.value})}/>\r\n                 <TextField name=\"Tags\"\r\n                variant=\"outlined\" \r\n                label=\"Tags\" \r\n                fullWidth \r\n                value={postData.tags} \r\n                onChange={(e)=> setPostData({...postData, tags: e.target.value})}/>\r\n                <div className={classes.fileInput}>\r\n                    <FileBase\r\n                    type =\"file\"\r\n                    multiple={false}\r\n                    onDone={({base64}) => setPostData({...postData, selectedFile:base64 })}\r\n                    ></FileBase></div>\r\n                    <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" size=\"small\" fullWidth onClick={clear}>Clear</Button>\r\n           </form>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Form; ","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Post\\Post.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\styles.js",[],["55","56"],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Posts\\Post\\styles.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\reducers\\index.js",[],["57","58"],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\reducers\\posts.js",["59","60"],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\actions\\posts.js",["61"],"import * as api from '../api'; \r\n\r\n//Action Creators \r\n\r\nexport const getPosts = () => async(dispatch) => {\r\n\r\n    try{\r\n        const {data} = await api.fetchPosts(); \r\n        dispatch({type: 'FETCH_ALL', payload: data});  \r\n    }catch(error){\r\n       console.log(error.message)\r\n    }\r\n}\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try{\r\n        const {data} = await api.createPost(post); \r\n        dispatch({\r\n            type: 'CREATE_POST', \r\n            payload: data\r\n        })\r\n    } catch(error){\r\n        console.log(error.message); \r\n    }\r\n}\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n       const {data} = await api.updatePost(id, post); \r\n       dispatch({\r\n           type: 'UPDATE_POST', \r\n           payload: data\r\n           })\r\n    } catch(error){\r\n        cobsole.log(error.message); \r\n    }\r\n}","C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\api\\index.js",[],"C:\\Users\\Jonathon\\Documents\\GitHub\\MERNstackMemories\\client\\src\\components\\Form\\styles.js",[],{"ruleId":"62","severity":1,"message":"63","line":16,"column":82,"nodeType":"64","messageId":"65","endLine":16,"endColumn":84},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":1,"nodeType":"74","endLine":13,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":9,"column":47,"nodeType":"64","messageId":"65","endLine":9,"endColumn":49},{"ruleId":"75","severity":2,"message":"76","line":35,"column":9,"nodeType":"77","messageId":"78","endLine":35,"endColumn":16},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["79"],"no-negated-in-lhs",["80"],["79"],["80"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-undef","'cobsole' is not defined.","Identifier","undef","no-global-assign","no-unsafe-negation"]